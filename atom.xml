<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  
  <title><![CDATA[动力火锅的猫空间]]></title>
  
  <link href="/blog/atom.xml" rel="self"/>
  <link href="http://jonsk.github.io/blog/blog//"/>
  <updated>2016-03-29T09:27:04.000Z</updated>
  <id>http://jonsk.github.io/blog/blog//</id>
  
  <author>
    <name><![CDATA[动力火锅]]></name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title><![CDATA[Apache+Php+Oracle环境设置]]></title>
    <link href="http://jonsk.github.io/blog/blog/2016/03/29/20160329/"/>
    <id>http://jonsk.github.io/blog/blog/2016/03/29/20160329/</id>
    <published>2016-03-29T08:46:07.000Z</published>
    <updated>2016-03-29T09:27:04.000Z</updated>
    <content type="html"><![CDATA[<p>每个月对Oracle数据库进行检查时都需要输入一大堆的Sql语句，而这些语句每个月都要输入一次，实在是太麻烦了，因此用php写了一个页面，专门用来查询Oracle数据库的一些常用信息。不过由于是远程使用Php，因此需要对开发主机进行设置，以使得Php能支持Oracle。<br><a id="more"></a></p>
<h2 id="0x00_安装Php开发程序及编辑工具">0x00 安装Php开发程序及编辑工具</h2><p>安装开发环境，如果使用的Redhat需要使用yum来安装。</p>
<pre><code># apt-<span class="preprocessor">get</span> install php5-dev <span class="keyword">build-essential </span>php-pear libaio1 unzip make
</code></pre><h2 id="0x01_下载Oracle的客户端及开发包">0x01 下载Oracle的客户端及开发包</h2><p>PHP通常是不带oracle数据库管理扩展，因此我们需要自行下载并且编译安装和配置，用户可以在Oracle的官方网站上下载instantclient basic和instantclient sdk安装包。</p>
<blockquote>
<p><a href="http://www.oracle.com/technetwork/database/features/instant-client/index-097480.html" target="_blank" rel="external">http://www.oracle.com/technetwork/database/features/instant-client/index-097480.html</a></p>
</blockquote>
<p>根据自己服务器上的Oracle版本下载相对应的instantclient basic和instantclient sdk安装包，并解压到相应的目录中。</p>
<pre><code># unzip oracle-instantclient11.2-basic-11.2.0.1.0-1.x86_64.<span class="keyword">zip</span>
Archive:  oracle-instantclient11.2-basic-11.2.0.1.0-1.x86_64.<span class="keyword">zip</span>
  inflating: instantclient_11_2/BASIC_README
  inflating: instantclient_11_2/adrci
  inflating: instantclient_11_2/genezi
  inflating: instantclient_11_2/libclntsh.<span class="keyword">so</span>.11.1
  inflating: instantclient_11_2/libnnz11.<span class="keyword">so</span>
  inflating: instantclient_11_2/libocci.<span class="keyword">so</span>.11.1
  inflating: instantclient_11_2/libociei.<span class="keyword">so</span>
  inflating: instantclient_11_2/libocijdbc11.<span class="keyword">so</span>
  inflating: instantclient_11_2/ojdbc5.jar
  inflating: instantclient_11_2/ojdbc6.jar
  inflating: instantclient_11_2/xstreams.jar

# unzip oracle-instantclient11.2-sdk-11.2.0.1.0-1.x86_64.<span class="keyword">zip</span>
Archive:  oracle-instantclient11.2-sdk-11.2.0.1.0-1.x86_64.<span class="keyword">zip</span>
   creating: instantclient_11_2/sdk/
   creating: instantclient_11_2/sdk/<span class="keyword">include</span>/
  inflating: instantclient_11_2/sdk/<span class="keyword">include</span>/occi.<span class="literal">h</span>
  inflating: instantclient_11_2/sdk/<span class="keyword">include</span>/occiCommon.<span class="literal">h</span>
  inflating: instantclient_11_2/sdk/<span class="keyword">include</span>/occiControl.<span class="literal">h</span>
  inflating: instantclient_11_2/sdk/<span class="keyword">include</span>/occiData.<span class="literal">h</span>
  inflating: instantclient_11_2/sdk/<span class="keyword">include</span>/occiObjects.<span class="literal">h</span>
  inflating: instantclient_11_2/sdk/<span class="keyword">include</span>/occiAQ.<span class="literal">h</span>
  inflating: instantclient_11_2/sdk/<span class="keyword">include</span>/oci.<span class="literal">h</span>
  inflating: instantclient_11_2/sdk/<span class="keyword">include</span>/oci1.<span class="literal">h</span>
  inflating: instantclient_11_2/sdk/<span class="keyword">include</span>/oci8dp.<span class="literal">h</span>
  inflating: instantclient_11_2/sdk/<span class="keyword">include</span>/ociap.<span class="literal">h</span>
  inflating: instantclient_11_2/sdk/<span class="keyword">include</span>/ociapr.<span class="literal">h</span>
  inflating: instantclient_11_2/sdk/<span class="keyword">include</span>/ocidef.<span class="literal">h</span>
  inflating: instantclient_11_2/sdk/<span class="keyword">include</span>/ocidem.<span class="literal">h</span>
  inflating: instantclient_11_2/sdk/<span class="keyword">include</span>/ocidfn.<span class="literal">h</span>
  inflating: instantclient_11_2/sdk/<span class="keyword">include</span>/ociextp.<span class="literal">h</span>
  inflating: instantclient_11_2/sdk/<span class="keyword">include</span>/ocikpr.<span class="literal">h</span>
  inflating: instantclient_11_2/sdk/<span class="keyword">include</span>/ocixmldb.<span class="literal">h</span>
  inflating: instantclient_11_2/sdk/<span class="keyword">include</span>/ocixstream.<span class="literal">h</span>
  inflating: instantclient_11_2/sdk/<span class="keyword">include</span>/odci.<span class="literal">h</span>
  inflating: instantclient_11_2/sdk/<span class="keyword">include</span>/oratypes.<span class="literal">h</span>
  inflating: instantclient_11_2/sdk/<span class="keyword">include</span>/ori.<span class="literal">h</span>
  inflating: instantclient_11_2/sdk/<span class="keyword">include</span>/orid.<span class="literal">h</span>
  inflating: instantclient_11_2/sdk/<span class="keyword">include</span>/orl.<span class="literal">h</span>
  inflating: instantclient_11_2/sdk/<span class="keyword">include</span>/oro.<span class="literal">h</span>
  inflating: instantclient_11_2/sdk/<span class="keyword">include</span>/ort.<span class="literal">h</span>
  inflating: instantclient_11_2/sdk/<span class="keyword">include</span>/xa.<span class="literal">h</span>
  inflating: instantclient_11_2/sdk/<span class="keyword">include</span>/nzt.<span class="literal">h</span>
  inflating: instantclient_11_2/sdk/<span class="keyword">include</span>/nzerror.<span class="literal">h</span>
  inflating: instantclient_11_2/sdk/<span class="keyword">include</span>/ldap.<span class="literal">h</span>
   creating: instantclient_11_2/sdk/demo/
  inflating: instantclient_11_2/sdk/demo/demo.mk
  inflating: instantclient_11_2/sdk/demo/cdemo81.c
  inflating: instantclient_11_2/sdk/demo/occidemo.sql
  inflating: instantclient_11_2/sdk/demo/occidemod.sql
  inflating: instantclient_11_2/sdk/demo/occidml.cpp
  inflating: instantclient_11_2/sdk/demo/occiobj.cpp
  inflating: instantclient_11_2/sdk/demo/occiobj.<span class="keyword">typ</span>
  inflating: instantclient_11_2/sdk/SDK_README
 extracting: instantclient_11_2/sdk/ottclasses.<span class="keyword">zip</span>
  inflating: instantclient_11_2/sdk/ott
</code></pre><p>在解压后生成的目录中建立库文件的软连接，并移动到/usr/local/lib目录中：</p>
<pre><code><span class="comment"># cd instantclient_11_2</span>
<span class="comment"># ln -s libnnz11.so libnnz.so</span>
<span class="comment"># ln -s libclntsh.so.11.1 libclntsh.so</span>
<span class="comment"># ln -s libocci.so.11.1 libocci.so</span>
<span class="comment"># cd .. &amp;&amp; mv instantclient_11_2 /usr/local/lib/</span>
<span class="comment"># chmod 777 -R /usr/local/lib/instantclient/</span>
</code></pre><p>设置系统环境变量，保证在编辑时能找到instantclient的目录。</p>
<pre><code><span class="id">#vim</span> /etc/environment
</code></pre><p>在environment文件的最后面增加以下内容：</p>
<blockquote>
<p>#Oracle Instant Client<br>LD_LIBRARY_PATH=”/usr/local/lib/instantclient”<br>TNS_ADMIN=”/usr/local/lib/instantclient”<br>ORACLE_BASE=”/usr/local/lib/instantclient”<br>ORACLE_HOME=$ORACLE_BASE</p>
</blockquote>
<p>现在，可以使用pecl来安装oci8了，如果php是7.0或以上版本则要使用oci8-2.0.10</p>
<pre><code># <span class="tag">pecl</span> <span class="tag">install</span> <span class="tag">oci8-2</span><span class="class">.0</span><span class="class">.10</span>
</code></pre><p>安装的过程中会自动下载oci8的代码并进行编译，在编译的过程中会提示输入instantclient的相关路径变量：</p>
<p>最终终的编译完成信息如下：</p>
<pre><code>Build process completed successfully
Installing '/usr/lib/php5/20121212/oci8.so'
<span class="operator"><span class="keyword">install</span> ok: channel://pecl.php.net/oci8-<span class="number">2.0</span>.8
configuration <span class="keyword">option</span> <span class="string">"php_ini"</span> <span class="keyword">is</span> <span class="keyword">not</span> <span class="keyword">set</span> <span class="keyword">to</span> php.ini location
You should <span class="keyword">add</span> <span class="string">"extension=oci8.so"</span> <span class="keyword">to</span> php.ini</span>
</code></pre><h2 id="0x03_配置oci8">0x03 配置oci8</h2><p>按照上面的提示在php.ini中直接开启extension，不过因为apache的PHP配置是单独的，因此我们需要修改apache的配置文件，如果是lighttpd则要改相应的配置文件。</p>
<pre><code># vi <span class="regexp">/etc/</span>php5<span class="regexp">/apache2/</span>conf.d<span class="regexp">/oci8.ini</span>
</code></pre><p>增加以下内容：</p>
<pre><code>extension=oci8<span class="class">.so</span>    
</code></pre><p>然后重新启动apache。</p>
<pre><code><span class="preprocessor"># /etc/init.d/apache2 restart </span>
</code></pre><h2 id="0x04_测试oci支持">0x04 测试oci支持</h2><p>现在oci已经安装完成了，可以使用phpinfo()来测试一下了，如果出现以下内容则表示PHP已经支持Oracle了。<br>OCI8</p>
<tr><td>OCI8 Support </td><td>enabled </td></tr><br><tr><td>OCI8 DTrace Support </td><td>disabled </td></tr><br><tr><td>OCI8 Version </td><td>2.0.10 </td></tr><br><tr><td>Revision </td><td>$Id: f5a3ee1083d1ffa6adb5143efda6eafa210b8414 $ </td></tr><br><tr><td>Oracle Run-time Client Library Version </td><td>11.2.0.1.0 </td></tr><br><tr><td>Oracle Compile-time Instant Client Version </td><td>11.2 </td></tr>
]]></content>
    <summary type="html">
    <![CDATA[<p>每个月对Oracle数据库进行检查时都需要输入一大堆的Sql语句，而这些语句每个月都要输入一次，实在是太麻烦了，因此用php写了一个页面，专门用来查询Oracle数据库的一些常用信息。不过由于是远程使用Php，因此需要对开发主机进行设置，以使得Php能支持Oracle。<br>]]>
    
    </summary>
    
  </entry>
  
  <entry>
    <title><![CDATA[ettercap 编译禁用GTK]]></title>
    <link href="http://jonsk.github.io/blog/blog/2016/03/21/20160321/"/>
    <id>http://jonsk.github.io/blog/blog/2016/03/21/20160321/</id>
    <published>2016-03-21T06:17:43.000Z</published>
    <updated>2016-03-21T06:34:23.000Z</updated>
    <content type="html"><![CDATA[<p>之前编译了一个ettercap程序，但是在运行的过程中经常会莫名奇妙的退出，并提示开启DEBUG模式进行排错。随后仔细看了一下版本后决定将ettercap升级到最新的版本0.8.2，并且不启用GTK的图形界面。<br><a id="more"></a></p>
<p><strong>ettercap</strong>在编译时会默认会启用图形界面的支持，而图型界面则是通过GTK2来支持，如果安装了GTK2但是没有设置<em>GTK_BUILD_TYP</em>则会以cmake时提示：</p>
<pre><code>-<span class="ruby">- <span class="constant">No</span> <span class="constant">GTK_BUILD_TYPE</span> <span class="keyword">defined</span>, default is <span class="constant">GTK2</span>
</span>-<span class="ruby">- <span class="constant">Found</span> <span class="constant">GTK2_GTK</span><span class="symbol">:</span> /usr/lib64/libgtk-x11-<span class="number">2.0</span>.so</span>
</code></pre><p>如果在系统中没有安装GTK2，则会出现以下的编译错误：</p>
<pre><code>[ <span class="number">13</span>%] Building C object src<span class="regexp">/interfaces/</span>CMakeFiles<span class="regexp">/ec_interfaces.dir/</span>gtk/ec_gtk.c.o
<span class="regexp">/root/</span>tmp<span class="regexp">/ettercap-0.8.2/</span>src<span class="regexp">/interfaces/</span>gtk/ec_gtk.<span class="string">c:</span> In function ‘gtkui_combo_enter’:
<span class="regexp">/root/</span>tmp<span class="regexp">/ettercap-0.8.2/</span>src<span class="regexp">/interfaces/</span>gtk/ec_gtk.<span class="string">c:</span><span class="number">1567</span>: 错误：‘GDK_KEY_Return’ 未声明 ( 在此函数内第一次使用)
<span class="regexp">/root/</span>tmp<span class="regexp">/ettercap-0.8.2/</span>src<span class="regexp">/interfaces/</span>gtk/ec_gtk.<span class="string">c:</span><span class="number">1567</span>: 错误：(即使在一个函数内多次出现 ，每个未声明的标识符在其
<span class="regexp">/root/</span>tmp<span class="regexp">/ettercap-0.8.2/</span>src<span class="regexp">/interfaces/</span>gtk/ec_gtk.<span class="string">c:</span><span class="number">1567</span>: 错误：所在的函数内只报告一次。)
make[<span class="number">2</span>]: *** [src<span class="regexp">/interfaces/</span>CMakeFiles<span class="regexp">/ec_interfaces.dir/</span>gtk/ec_gtk.c.o] 错误 <span class="number">1</span>
make[<span class="number">1</span>]: *** [src<span class="regexp">/interfaces/</span>CMakeFiles<span class="regexp">/ec_interfaces.dir/</span>all] 错误 <span class="number">2</span>
<span class="string">make:</span> *** [all] 错误 <span class="number">2</span>
</code></pre><p>其实对于多数只使用控制台来管理服务器的管理员来说，完全不需要GTK这种图型界面的支持，因此我们只需要简单的在ettercap的编译过程中禁止GTK就可以：</p>
<pre><code><span class="keyword">cmake</span> -D ENABLE_GTK=<span class="literal">OFF</span> ../
</code></pre><p>其中ENABLE_GTK=OFF参数就完成对GTK的禁止。</p>
<p>CMake是一个跨平台的安装，它和以往Linux程序所带的的configure确实不太一样，以往使用./configure —help就可以看到各种配置参数，但是cmake却不行，不过cmake提供了很好的帮助，用户需要使用cmake ../ —help来查看各种可以支持的参数：</p>
<pre><code>#cmake ../ --help
Usage

cmake [options] &lt;path-<span class="keyword">to</span>-source&gt;
cmake [options] &lt;path-<span class="keyword">to</span>-existing-build&gt;

Specify a source directory <span class="keyword">to</span> (re-)generate a build system <span class="keyword">for</span> it <span class="keyword">in</span> the
current working directory.  Specify an existing build directory <span class="keyword">to</span>
re-generate its build system.

Options
  -C &lt;initial-cache&gt;           = Pre-load a script <span class="keyword">to</span> populate the cache.
  -D &lt;var&gt;[:&lt;<span class="class"><span class="keyword">type</span>&gt;]</span>=&lt;value&gt;    = Create a cmake cache entry.
  -U &lt;globbing_expr&gt;           = Remove matching entries from CMake cache.
  -G &lt;generator-name&gt;          = Specify a build system generator.
  -T &lt;toolset-name&gt;            = Specify toolset name <span class="keyword">if</span> supported by
                                 generator.
  -A &lt;platform-name&gt;           = Specify platform name <span class="keyword">if</span> supported by
                                 generator.
  -Wno-dev                     = Suppress developer warnings.
  -Wdev                        = Enable developer warnings.
  -E                           = CMake command mode.
  -L[A][H]                     = List non-advanced cached variables.
  --build &lt;dir&gt;                = Build a CMake-generated project binary tree.
  -N                           = View mode only.
  -P &lt;file&gt;                    = Process script mode.
  --find-package               = Run <span class="keyword">in</span> pkg-config like mode.
  --graphviz=[file]            = Generate graphviz <span class="keyword">of</span> dependencies, see
                                 CMakeGraphVizOptions.cmake <span class="keyword">for</span> more.
  --system-information [file]  = Dump information about this system.
  --debug-trycompile           = Do not delete the try_compile build tree.
                                 Only useful on one try_compile at a time.
  --debug-output               = Put cmake <span class="keyword">in</span> a debug mode.
  --trace                      = Put cmake <span class="keyword">in</span> trace mode.
  --warn-uninitialized         = Warn about uninitialized values.
  --warn-unused-vars           = Warn about unused variables.
  --no-warn-unused-cli         = Don't warn about command line options.
  --check-system-vars          = Find problems <span class="keyword">with</span> variable usage <span class="keyword">in</span> system
                                 files.
  --help,-help,-usage,-h,-H,/? = Print usage information <span class="keyword">and</span> exit.
  --version,-version,/V <span class="annotation">[&lt;f&gt;]</span>  = Print version number <span class="keyword">and</span> exit.
  --help-full <span class="annotation">[&lt;f&gt;]</span>            = Print all help manuals <span class="keyword">and</span> exit.
  --help-manual &lt;man&gt; <span class="annotation">[&lt;f&gt;]</span>    = Print one help manual <span class="keyword">and</span> exit.
  --help-manual-list <span class="annotation">[&lt;f&gt;]</span>     = List help manuals available <span class="keyword">and</span> exit.
  --help-command &lt;cmd&gt; <span class="annotation">[&lt;f&gt;]</span>   = Print help <span class="keyword">for</span> one command <span class="keyword">and</span> exit.
  --help-command-list <span class="annotation">[&lt;f&gt;]</span>    = List commands <span class="keyword">with</span> help available <span class="keyword">and</span> exit.
  --help-commands <span class="annotation">[&lt;f&gt;]</span>        = Print cmake-commands manual <span class="keyword">and</span> exit.
  --help-<span class="keyword">module</span> &lt;mod&gt; <span class="annotation">[&lt;f&gt;]</span>    = Print help <span class="keyword">for</span> one <span class="keyword">module</span> <span class="keyword">and</span> exit.
  --help-<span class="keyword">module</span>-list <span class="annotation">[&lt;f&gt;]</span>     = List modules <span class="keyword">with</span> help available <span class="keyword">and</span> exit.
  --help-modules <span class="annotation">[&lt;f&gt;]</span>         = Print cmake-modules manual <span class="keyword">and</span> exit.
  --help-policy &lt;cmp&gt; <span class="annotation">[&lt;f&gt;]</span>    = Print help <span class="keyword">for</span> one policy <span class="keyword">and</span> exit.
  --help-policy-list <span class="annotation">[&lt;f&gt;]</span>     = List policies <span class="keyword">with</span> help available <span class="keyword">and</span> exit.
  --help-policies <span class="annotation">[&lt;f&gt;]</span>        = Print cmake-policies manual <span class="keyword">and</span> exit.
  --help-property &lt;prop&gt; <span class="annotation">[&lt;f&gt;]</span> = Print help <span class="keyword">for</span> one property <span class="keyword">and</span> exit.
  --help-property-list <span class="annotation">[&lt;f&gt;]</span>   = List properties <span class="keyword">with</span> help available <span class="keyword">and</span>
                                 exit.
  --help-properties <span class="annotation">[&lt;f&gt;]</span>      = Print cmake-properties manual <span class="keyword">and</span> exit.
  --help-variable var <span class="annotation">[&lt;f&gt;]</span>    = Print help <span class="keyword">for</span> one variable <span class="keyword">and</span> exit.
  --help-variable-list <span class="annotation">[&lt;f&gt;]</span>   = List variables <span class="keyword">with</span> help available <span class="keyword">and</span> exit.
  --help-variables <span class="annotation">[&lt;f&gt;]</span>       = Print cmake-variables manual <span class="keyword">and</span> exit.

Generators

The following generators are available on this platform:
  Unix Makefiles               = Generates standard UNIX makefiles.
  Ninja                        = Generates build.ninja files.
  Watcom WMake                 = Generates Watcom WMake makefiles.
  CodeBlocks - Ninja           = Generates CodeBlocks project files.
  CodeBlocks - Unix Makefiles  = Generates CodeBlocks project files.
  CodeLite - Ninja             = Generates CodeLite project files.
  CodeLite - Unix Makefiles    = Generates CodeLite project files.
  Eclipse CDT4 - Ninja         = Generates Eclipse CDT <span class="number">4.0</span> project files.
  Eclipse CDT4 - Unix Makefiles= Generates Eclipse CDT <span class="number">4.0</span> project files.
  KDevelop3                    = Generates KDevelop <span class="number">3</span> project files.
  KDevelop3 - Unix Makefiles   = Generates KDevelop <span class="number">3</span> project files.
  Kate - Ninja                 = Generates Kate project files.
  Kate - Unix Makefiles        = Generates Kate project files.
  Sublime Text <span class="number">2</span> - Ninja       = Generates Sublime Text <span class="number">2</span> project files.
  Sublime Text <span class="number">2</span> - Unix Makefiles
                               = Generates Sublime Text <span class="number">2</span> project files.
</code></pre>]]></content>
    <summary type="html">
    <![CDATA[<p>之前编译了一个ettercap程序，但是在运行的过程中经常会莫名奇妙的退出，并提示开启DEBUG模式进行排错。随后仔细看了一下版本后决定将ettercap升级到最新的版本0.8.2，并且不启用GTK的图形界面。<br>]]>
    
    </summary>
    
  </entry>
  
  <entry>
    <title><![CDATA[定制Debian版的树莓派系统]]></title>
    <link href="http://jonsk.github.io/blog/blog/2015/10/09/20151009/"/>
    <id>http://jonsk.github.io/blog/blog/2015/10/09/20151009/</id>
    <published>2015-10-09T04:02:30.000Z</published>
    <updated>2015-10-10T06:57:04.000Z</updated>
    <content type="html"><![CDATA[<p>在树莓派的<a href="https://www.raspberrypi.org" target="_blank" rel="external">官方网站上</a>提供了多个的系统镜像，但是这些镜像都有一个共同点，哪就是安装了一些用户并不需要的程序，而这些程序占用了大量的空间，为了节省出更多的空间，所以我才需要重头定制树莓派的系统。由于我经常使用的系统是Debian所以定制也是基于Debian。<br><a id="more"></a></p>
<h2 id="0x00_需要的材料及工具">0x00 需要的材料及工具</h2><p>材料其实很简单，只需要一个树莓派和一个8G的SD卡，当然4G的也可以，只要官方提供的镜像能写入就可以了，除此之外还需要一个SD卡的读卡器用于镜像文件的写入，以及后继的操作。</p>
<p>SD卡的型号可以参考树莓派官方提供的一个<a href="http://elinux.org/RPi_SD_cards" target="_blank" rel="external">列表</a></p>
<p>工具则需要下载<a href="http://software.opensuse.org/package/imagewriter" target="_blank" rel="external">ImageWriter</a>，这个是树莓派官方推荐的Windows下镜像写入工具，以及官方提供的Raspbian镜像，需要注意的是Raspbian镜像有两个版本，分别是Jessie和Wheezy，因为只是过渡，所以无论下载哪一个都是可以的。本文中下载的是Jessiet版本，<a href="http://212.187.212.73/bt/dffe8144ecd9af3961fdf142e39794e038f1cfc5/data/2015-09-24-raspbian-jessie.zip" target="_blank" rel="external">下载链接</a>。</p>
<p><strong>Jessiet版本有1.2G，而Wheezy只有990MB，如果空间小可以只下载Wheezy版本。</strong></p>
<h2 id="0x01_写入镜像">0x01 写入镜像</h2><p>安装好之前下载的ImageWriter，然后将下载的zip镜像文件解压，并在电脑上接好读卡器和SD卡。</p>
<p>使用ImageWriter打开解压的镜像文件，并<strong>正确</strong>选择SD卡的盘符位置，然后选择Write进行写入。</p>
<h2 id="0x02_生成最小系统">0x02 生成最小系统</h2><p>将写入好的卡片插入到树莓派中，然后接连网线，上电，网络设备一定要支持DHCP分配，因此最好是接到路由器上，然后开始等待，第一次启动时需要生成SSH证书，因此需要一段时间，估计等个5分钟左右就可以在路由器的DHCO客户列表中看到树莓派的身影了，这时就可以使用SSH工具连接树莓派的IP，系统默认会启动SSH服务。用户名是<code>raspberry</code>,密码为<code>pi</code>，进入后</p>
<p>登录完成后使用<code>raspi-config</code>命令对SD卡进行扩容，由于镜像默认的大小是4G,因此写入后的SD卡也只有4G大小，需要对其进行扩容，以便使用所有空间。</p>
<pre><code><span class="preprocessor"># raspi-config</span>
</code></pre><p>选择<code>Expand Filesystem</code>选项并确认就行了。</p>
<p><strong>扩容之后系统需要重新启动才能识别出全部的空间</strong></p>
<p>接下来进行系统更新并安装定制的工具<code>debootstrap</code></p>
<pre><code><span class="preprocessor"># apt-get update</span>
<span class="preprocessor"># apt-get install debootstrap</span>
</code></pre><p>建立一个新的系统目录，并使用debootstrap来生成一个最小化的Debian系统。</p>
<pre><code><span class="preprocessor"># mkdir /new_debian</span>
<span class="preprocessor"># debootstrap --arch armhf jessie /new_debian http://mirrors.opencas.cn/raspbian/raspbian/</span>
</code></pre><p>其它<code>--arch</code>参数是指定我们所需要的安装平台，由于树莓派是基于arm平台的，所以我们选择<code>armhf</code>参数（这个参数是指的我们所安装系统支持硬件浮点运算的版本）<code>jessie</code>是指Debian的版本，当然也可以选择<code>wheezy</code>版本后面的<code>/new_debian</code>则是批定新生成的系统根目录，最后的网址则是更新数据的来源网站，这里使用的是官方网址，也可以使用树莓派在国内的镜像网站<code>http://mirrors.opencas.cn/raspbian/raspbian/</code></p>
<p>更多的可以查看官方的页面<a href="http://raspbian.org/RaspbianMirrors" target="_blank" rel="external">镜像地址</a></p>
<p>整个更新过程视网速而定，一般在1个小时以上。</p>
<p>更新完成后就有了一个基本的系统，这时我们就可以对它进行配置了。</p>
<h2 id="0x03_配置新系统">0x03 配置新系统</h2><p>更新系统配置文件包含以下几个方面：</p>
<p>1、更新文件系统/etc/fstab<br><br>2、更新软件包配置文件/etc/apt/source.list<br><br>3、更新网卡、DNS配置文件<br><br>4、拷贝内核模块与固件文件<br><br>5、通过chroot进入系统进行配置<br></p>
<p>修改/new_debian/etc/fstab文件的内容为以下内容：</p>
<pre><code>/dev/mmcblk0p2          /                      ext4    defaults        <span class="number">1</span> <span class="number">1</span>
tmpfs                   /dev/shm                tmpfs   defaults        <span class="number">0</span> <span class="number">0</span>
devpts                  /dev/pts                devpts  gid=<span class="number">5</span>,mode=<span class="number">620</span>  <span class="number">0</span> <span class="number">0</span>
sysfs                   /sys                    sysfs   defaults        <span class="number">0</span> <span class="number">0</span>
<span class="keyword">proc</span>                    /<span class="keyword">proc</span>                   <span class="keyword">proc</span>    defaults        <span class="number">0</span> <span class="number">0</span>
</code></pre><p>修改软件包配置文件，如果为了省事可以直接将/etc/apt/source.list拷贝到/new_debian/etc/apt目录中</p>
<pre><code># <span class="keyword">cp</span> /etc/apt/<span class="keyword">source</span>.<span class="keyword">list</span> /new_debian/etc/apt/<span class="keyword">source</span>.<span class="keyword">list</span>
</code></pre><p>更新网卡以及DNS配置</p>
<p>修改网络配置信息/etc/network/interfaces，增加以下内容，如果没有无线网络，可以删除<code>auto wlan0</code>以下的所有行。如果需要使用dhcp自己拿ip地址则需要安装相应的dchp客户端dhcpcd5或isc-dhcp-client软件包</p>
<pre><code># Please note that this <span class="keyword">file</span> <span class="keyword">is</span> written <span class="keyword">to</span> <span class="keyword">be</span> used with dhcpcd.
# For static IP, consult /etc/dhcpcd.<span class="keyword">conf</span> <span class="built_in">and</span> <span class="string">'man dhcpcd.conf'</span>.

auto <span class="keyword">lo</span>
iface <span class="keyword">lo</span> inet loopback

auto eth0
allow-hotplug eth0
iface eth0 inet manual

allow-hotplug eth0
iface eth0 inet static
    address <span class="number">192.168</span>.<span class="number">1.110</span>
    netmask <span class="number">255.255</span>.<span class="number">255.0</span>
    network <span class="number">192.168</span>.<span class="number">1.0</span>
    broadcast <span class="number">192.168</span>.<span class="number">1.255</span>
    gateway <span class="number">192.168</span>.<span class="number">1.1</span>
    dns-nameservers <span class="number">192.168</span>.<span class="number">1.1</span>

auto wlan0
allow-hotplug wlan0
iface wlan0 inet manual
wpa-<span class="keyword">conf</span> /etc/wpa_supplicant/wpa_supplicant.<span class="keyword">conf</span>

auto wlan1
allow-hotplug wlan1
iface wlan1 inet manual
wpa-<span class="keyword">conf</span> /etc/wpa_supplicant/wpa_supplicant.<span class="keyword">conf</span>
</code></pre><p>修改DNS文件：/etc/resolv.conf</p>
<pre><code><span class="tag">nameserver</span> 192<span class="class">.168</span><span class="class">.1</span><span class="class">.1</span>
</code></pre><p>拷贝内核模块与固件文件到新系统</p>
<pre><code># cp <span class="regexp">/lib/</span>firmware <span class="regexp">/new_debian/</span>lib -ar
# cp <span class="regexp">/lib/m</span>odules<span class="regexp">/ /</span>new_debian<span class="regexp">/lib -ar    </span>
</code></pre><p>进入到临时环境，首先挂载以下系统</p>
<pre><code><span class="preprocessor"># mount -v --bind /dev /new_debian/dev</span>
<span class="preprocessor"># mount -vt devpts devpts /new_debian/dev/pts -o gid=5,mode=620</span>
<span class="preprocessor"># mount -vt proc proc /new_debian/proc</span>
<span class="preprocessor"># mount -vt sysfs sysfs /new_debian/sys</span>
<span class="preprocessor"># mount -vt tmpfs tmpfs /new_debian/run</span>
</code></pre><p>然后使用chroot进入临时环境</p>
<pre><code><span class="preprocessor"># chroot /new_debian</span>
</code></pre><p>这时就可以安装自己需要的软件了</p>
<pre><code># apt-get <span class="operator"><span class="keyword">install</span> screen openssh-<span class="keyword">server</span></span>
</code></pre><p>如果需要使用root用户登录，则需要在安装完ssh后修改/etc/ssh/sshd_config文件内容，将PermitRootLogin without-password更改为#PermitRootLogin yes</p>
<pre><code><span class="comment">#PermitRootLogin without-password</span>
<span class="title">PermitRootLogin</span> <span class="built_in">yes</span>
</code></pre><p>最后退出临时环境</p>
<pre><code><span class="preprocessor"># exit</span>
</code></pre><p>卸载掉以下挂载点：</p>
<pre><code><span class="preprocessor"># umount /new_debian/dev</span>
<span class="preprocessor"># umount /new_debian/dev/pts</span>
<span class="preprocessor"># umount /new_debian/proc </span>
<span class="preprocessor"># umount /new_debian/sys </span>
<span class="preprocessor"># umount /new_debian/run </span>
</code></pre><p>至此整个系统建立完成，接下来需要对SD卡片进行系统替换。这里需要一台Linux的主机来进行操作。</p>
<h2 id="0x04_替换系统">0x04 替换系统</h2><p>将SD卡接到Linux主机上，保证Linux主机能挂载SD卡上的分区即可</p>
<pre><code><span class="comment"># mount /dev/sdb2 /mnt</span>
<span class="comment"># cd /mnt</span>
<span class="comment"># ls </span>
bin  boot  dev  etc  home  lib  list_pack  media 
mnt  new_debian  opt  <span class="keyword">proc</span>  root  run  sbin  srv
sys  tmp  usr  <span class="keyword">var</span> 
<span class="comment"># mkdir old.system</span>
<span class="comment"># mv * old.system</span>
<span class="comment"># mv old.system/new_debian/* ./</span>
</code></pre><p>完成此操作后最好使用sync同步一下</p>
<pre><code><span class="preprocessor">#sync</span>
</code></pre><p>最后卸载掉/mnt目录，使用SD卡来启动树莓派吧。</p>
<p>可以使用du来查看一下空间使用情况，通常一个最小化的系统加上openssh等工具只会占用约400MB左右的空间。</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>在树莓派的<a href="https://www.raspberrypi.org">官方网站上</a>提供了多个的系统镜像，但是这些镜像都有一个共同点，哪就是安装了一些用户并不需要的程序，而这些程序占用了大量的空间，为了节省出更多的空间，所以我才需要重头定制树莓派的系统。由于我经常使用的系统是Debian所以定制也是基于Debian。<br>]]>
    
    </summary>
    
  </entry>
  
  <entry>
    <title><![CDATA[Ngaios安装指南]]></title>
    <link href="http://jonsk.github.io/blog/blog/2015/09/16/20150916/"/>
    <id>http://jonsk.github.io/blog/blog/2015/09/16/20150916/</id>
    <published>2015-09-16T06:22:26.000Z</published>
    <updated>2016-03-21T06:28:10.000Z</updated>
    <content type="html"><![CDATA[<p>机房的监控一直以来都是一件较为重要的事，在公司搬家后一直没有部署监控系统，结果当需要查看监控数据时慌了手脚，只好马上搭建一套。顺便记录了一下安装过程。<br><a id="more"></a></p>
<h1 id="Ngaios安装指南">Ngaios安装指南</h1><h2 id="0x00_关于Nagios">0x00 关于Nagios</h2><p>Nagios是一款开源的免费网络监视工具，通过它可以对操作系统、交换机、路由器、打印机等设备进行监控，并在出现问题时通过页面展式出来或是通知短信和邮件来用户用。</p>
<p>Nagios 可以监控的功能有：</p>
<ul>
<li>监控网络服务（SMTP、POP3、HTTP、NNTP、PING等）；</li>
<li>监控主机资源（处理器负荷、磁盘利用率等）；</li>
<li>监控打印机的使用情况；</li>
<li>可以通过WEB界面用于查看当前的网络状态、通知和故障历史、日志文件等；</li>
</ul>
<p>我这里就写了些常用的，其它还有其它功能，有兴趣可以去它的<a href="https://www.nagios.org/" target="_blank" rel="external">网站</a>上看看</p>
<h2 id="0x01_准备工作">0x01 准备工作</h2><p>Nagios的安装需要编译环境、WEB服务器以及一些关系库，如libgd2-xpm-dev等。</p>
<pre><code># apt-<span class="built_in">get</span> install apache libgd2-xpm-<span class="built_in">dev</span> build-essential
</code></pre><p>随后下载Nagios的源代码以及它的插件。</p>
<pre><code><span class="preprocessor"># wget https:<span class="comment">//assets.nagios.com/downloads/nagioscore/releases/nagios-4.1.0rc2.tar.gz</span></span>
<span class="preprocessor"># wget wget http:<span class="comment">//nagios-plugins.org/download/nagios-plugins-2.0.3.tar.gz</span></span>
</code></pre><p>建立Nagios的使用帐号和组</p>
<pre><code><span class="preprocessor"># useradd -m nagios</span>
<span class="preprocessor"># passwd nagios</span>
<span class="preprocessor"># groupadd nagcmd</span>
<span class="preprocessor"># usermod -a -G nagcmd nagios</span>
<span class="preprocessor"># usermod -a -G nagcmd www-data</span>
</code></pre><h2 id="0x02_开始安装">0x02 开始安装</h2><p>首先解压源代码，并进入到源码目录中：</p>
<pre><code><span class="preprocessor"># tar xzf nagios-4.1.0rc2.tar.gz</span>
<span class="preprocessor"># cd nagios-4.1.0rc2/</span>
</code></pre><p>配置Nagios，通过—with-command-group参数来指定Nagios运行时所使用的组，另外我通常还会通过—prefix参数来指定安装目录。</p>
<pre><code><span class="comment">#</span> <span class="string">.</span><span class="comment">/configure</span> <span class="literal">-</span><span class="literal">-</span><span class="comment">with</span><span class="literal">-</span><span class="comment">command</span><span class="literal">-</span><span class="comment">group=nagcmd</span> <span class="literal">-</span><span class="literal">-</span><span class="comment">prefix=/usr/local/Nagios</span>
</code></pre><p>开始编译吧。</p>
<pre><code><span class="preprocessor"># make all</span>
</code></pre><p>安装。</p>
<pre><code><span class="preprocessor"># make install</span>
<span class="preprocessor"># make install-init</span>
<span class="preprocessor"># make install-config</span>
<span class="preprocessor"># make install-commandmode</span>
<span class="preprocessor"># make install-webconf</span>
</code></pre><p>安装Nagios的Apache配置文件。</p>
<pre><code># <span class="regexp">/usr/</span>bin<span class="regexp">/install -c -m 644 sample-config/</span>httpd.conf <span class="regexp">/etc/</span>apache2<span class="regexp">/sites-enabled/</span>nagios.conf
</code></pre><p>设置nagiosadmin帐号的密码。</p>
<pre><code># htpasswd -c <span class="regexp">/usr/</span>local<span class="regexp">/nagios/</span>etc<span class="regexp">/htpasswd.users nagiosadmin</span>
</code></pre><p>重新启动Apache服务器,ubuntu可以通过server命令来重启动apache,但是我还是习惯直接使用脚本来操作。</p>
<pre><code><span class="preprocessor"># /etc/init.d/apache2 restart</span>
</code></pre><p>重启动之后就可以使用WEB页面来访问nagios了，默认的用户名和密码为之前设置的用户名和密码</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>机房的监控一直以来都是一件较为重要的事，在公司搬家后一直没有部署监控系统，结果当需要查看监控数据时慌了手脚，只好马上搭建一套。顺便记录了一下安装过程。<br>]]>
    
    </summary>
    
  </entry>
  
  <entry>
    <title><![CDATA[用Hexo在Github上建立博客]]></title>
    <link href="http://jonsk.github.io/blog/blog/2015/07/16/20150716/"/>
    <id>http://jonsk.github.io/blog/blog/2015/07/16/20150716/</id>
    <published>2015-07-16T02:42:48.000Z</published>
    <updated>2016-03-29T08:58:48.000Z</updated>
    <content type="html"><![CDATA[<p>花了差不多快一个星期的时间才在github上建立起自己的博客，所以在这里记录下来，一些基础知识就省了，写的比较简单，不过建立过程的经验和关键操作的记录都有写下来。<br><a id="more"></a></p>
<h3 id="0x00_关于Hexo和Github">0x00 关于Hexo和Github</h3><p>Hexo是一个基于node.js建立的博客框架，它提供一整套的解决方案，如博客主题，内容生成，提交等等功能，具体功能可以看它的<a href="https://hexo.io/" target="_blank" rel="external">官网</a>，记得在网页的语言中选择中文哦。</p>
<p>Github，这个就不用介绍了吧，你能看到这篇文章估计也是知道Github是什么：）。</p>
<h3 id="0x01_在Github上建立自己的页面">0x01 在Github上建立自己的页面</h3><p>首先你需要自己在github上注册，并生成你自己的证书并上传。随后在github上建立自己的项目,在项目建立后选择这个项目的Setings，在GitHub Pages选项上的Launch automatic page generator，将这个项目转变成为一个页面。</p>
<h3 id="0x02_建立本地主机环境">0x02 建立本地主机环境</h3><p>我使用的是Linux环境，因此本教程也是介绍的在Linux系统下建立环境，以下所介绍的所有命令除非特别说明否则均使用普通用户身份输入。</p>
<p>首先安装node.js,即使你使用的是提供yum或是apt程序的Linux发行版也<strong>推荐</strong>使用下面的命令来进行安装：</p>
<pre><code>wget -qO- http<span class="variable">s:</span>//raw.github.<span class="keyword">com</span>/creationix/nvm/master/install.<span class="keyword">sh</span> | <span class="keyword">sh</span>
</code></pre><p>运行结果如下：</p>
<pre><code><span class="status">=&gt;</span> nvm is already installed in /home/jonsk/.nvm, trying to update using git
<span class="status">=&gt;</span>
<span class="status">=&gt;</span> <span class="constant">Appending</span> source string to /root/.bashrc
<span class="status">=&gt;</span> <span class="constant">You</span> currently have modules installed globally with <span class="string">`npm`</span>. <span class="constant">These</span> will no
<span class="status">=&gt;</span> longer be linked to the active version of <span class="constant">Node</span> when you install a new node
<span class="status">=&gt;</span> with <span class="string">`nvm`</span>; and they may (depending on how you construct your <span class="string">`$PATH`</span>)
<span class="status">=&gt;</span> override the binaries of modules installed with <span class="string">`nvm`</span><span class="symbol">:</span>

/home/jonsk/.nvm/v<span class="number">0</span>.<span class="number">10.40</span>/lib
├── git<span class="variable">@0</span>.<span class="number">1.5</span>
├── hexo-cli<span class="variable">@0</span>.<span class="number">1.7</span>
<span class="status">
=&gt;</span> <span class="constant">If</span> you wish to uninstall them at a later point (or re-install them under your
<span class="status">=&gt;</span> <span class="string">`nvm`</span> <span class="constant">Nodes</span>), you can remove them from the system <span class="constant">Node</span> as <span class="symbol">follows:</span>

<span class="variable">$ </span>nvm use system
<span class="variable">$ </span>npm uninstall -g a_module
<span class="status">
=&gt;</span> <span class="constant">Close</span> and reopen your terminal to start using nvm
</code></pre><p>安装完成nvmrgk后就可以使用<code>nvm install</code>来安装node.js的最新版本,或是使用下来的命令来安装node.js 0.10.40版本。</p>
<pre><code>$ nvm <span class="keyword">install</span> <span class="number">0.10</span>.<span class="number">40</span>
</code></pre><p>在安装完成后你将可以使用npm命令，如果系统提示没有找到npm命令则需要检查是否设置了正确的npm路径，通常安装完成后会提示使用<code>source ~/.bashrc</code>命令来更新环境变量，如果更新环境变量后还是无法找到npm则将下面的代码替换路径后加入到.bashrc文件,再次更新环境。</p>
<pre><code><span class="built_in">export</span> NVM_DIR=<span class="string">"/home/jonsk/.nvm"</span>
[ <span class="operator">-s</span> <span class="string">"<span class="variable">$NVM_DIR</span>/nvm.sh"</span> ] &amp;&amp; . <span class="string">"<span class="variable">$NVM_DIR</span>/nvm.sh"</span>  <span class="comment"># This loads nvm</span>
</code></pre><h3 id="0x03_建立本地hexo环境">0x03 建立本地hexo环境</h3><p>当npm可以使用时我们就完成了本地环境的安装,接下来我们就可以通过npm来安装hexo和相关的模块了。</p>
<pre><code>$ npm install -<span class="keyword">g</span> hexo
$ npm install -<span class="keyword">g</span> hexo-<span class="keyword">cli</span>
</code></pre><p>使用以上命令来安装hexo，其中<code>-g</code>参数为全局安装，如果一切顺利，你将会安装好hexo，接下来将通过hexo来完成基本的配置。在你的系统中找一个合适的位置建立目录，我在这里使用的是~/hexo目录，在这个目录执行以下命令进行初始化。</p>
<pre><code><span class="variable">$ </span>hexo init 
</code></pre><p>接下来将初始化的文件转换为静态文件，这些文件也是最终要上传到我们github上的。</p>
<pre><code><span class="variable">$ </span>hexo g
</code></pre><p>如果需要预览效果可以使用<code>hexo s</code>命令来启动一个hexo自带的web服务器，用户可以通过访问<code>http://127.0.0.1:4000</code>这个地址来预览一下效果。</p>
<pre><code><span class="variable">$ </span>hexo s
</code></pre><p>注：事实上可以在完成初始化后就直接使用<code>hexo s</code>命令来进行预览，<code>hexo g</code>只是在上传到github之前才需要做的工作。</p>
<h3 id="0x04_配置hexo上传参数">0x04 配置hexo上传参数</h3><p>之所以将配置上传参数列是因为网上有各种配置方法很容易理解错误，因此对它进行说明。hexo的所有配置工作都是在<code>_config.yml</code>文件中完成的，而在这个配置文件中我们最关心的就是结尾的<code>deploy:</code>部分，事实上整个配置很简单，只需要更改以下三下参数<code>type</code>为git，<code>repository</code>为你项目的git地址，<code>branch</code>分支类型为gh-pages即可。</p>
<pre><code><span class="attribute">deploy</span>:
  <span class="attribute">type</span>: git
  <span class="attribute">repository</span>: <span class="attribute">https</span>:<span class="comment">//github.com/jonsk/blog.git</span>
  <span class="attribute">branch</span>: gh-pages
</code></pre><p><code>_config.yml</code>文件中的其它参数就都很简单了，网络上都已经解释的很详细了。</p>
<p><strong>需要说明的是_config.yml文件中所有参数前面都需要空一格，例如上面例子中type: git这个命令中git与:之前就有一个空格，如果没有这个空格则hexo会提示出错。</strong></p>
<h3 id="0x05_上传到github">0x05 上传到github</h3><p>在0x03中我们就做了一个工作即将初始化的文件转换为静态页面，如果你完成了这个<code>hexo g</code>命令并且配置好了自己github上的证书就可以使用<code>hexo d</code>命令来进行上传了。</p>
<pre><code><span class="variable">$ </span>hexo d
</code></pre><p>或是使用<code>hexo d -g</code>命令将转换与上传工作一起完成</p>
<pre><code>$ hexo <span class="keyword">d</span> -<span class="keyword">g</span>
</code></pre><p>在提示中输入用户名和密码并确认，如果验证通过则会将数据上传到github上。用户可以通过浏览器来查看自己的页面。</p>
<pre><code>INFO  Files loaded <span class="keyword">in</span> <span class="number">1.19</span> s
INFO  Generated: <span class="number">2015</span>/<span class="number">07</span>/<span class="number">16</span>/<span class="number">20150716</span>/index<span class="class">.html</span>
INFO  Generated: atom<span class="class">.xml</span>
INFO  Generated: sitemap<span class="class">.xml</span>
INFO  <span class="number">3</span> files generated <span class="keyword">in</span> <span class="number">191</span> ms
INFO  Deploying: git
INFO  Clearing <span class="class">.deploy</span> folder...
INFO  Copying files from public folder...
[master ec2d858] Site updated: <span class="number">2015</span>-<span class="number">07</span>-<span class="number">16</span> <span class="number">20</span>:<span class="number">34</span>:<span class="number">47</span>
 <span class="number">4</span> files changed, <span class="number">21</span> <span class="function"><span class="title">insertions</span><span class="params">(+)</span></span>, <span class="number">15</span> <span class="function"><span class="title">deletions</span><span class="params">(-)</span></span>
Username <span class="keyword">for</span> <span class="string">'https://github.com'</span>:  #输入github的用户名
Password <span class="keyword">for</span> <span class="string">'https://jonsk@github.com'</span>: #输入密码
To https:<span class="comment">//github.com/jonsk/blog.git</span>
   <span class="number">6828093</span>.<span class="class">.ec2d858</span>  master -&gt; gh-pages
分支 master 设置为跟踪来自 https:<span class="comment">//github.com/jonsk/blog.git 的远程分支 gh-pages。</span>
INFO  Deploy done: git
</code></pre><p>当然你可能看到一个由hexo提供的默认主题的blog，不过没有关系，至少我们已经完成了一些关键性的步骤。</p>
<h3 id="0x06_编写自己的第一篇文章">0x06 编写自己的第一篇文章</h3><p>hexo中写文章很容易，只需要使用<code>hexo n + 文章名</code>即可，例如我通常以时间来作文件名哪么我可以使用下面的命令来建立一篇名为20150716的文章（事实上这个名字只是给系统使用的，真正的文件我们会在20150716.md中定义）：</p>
<pre><code><span class="variable">$ </span>hexo n <span class="number">20150716</span>
<span class="constant">INFO </span> <span class="constant">Created:</span> ~<span class="regexp">/hexo/source</span><span class="regexp">/_posts/</span><span class="number">20150716</span>.md
</code></pre><p>文章建立完成后可以使用你顺便的编辑来对它进行编辑</p>
<pre><code><span class="variable">$ </span>vi ~<span class="regexp">/hexo/source</span><span class="regexp">/_posts/</span><span class="number">20150716</span>.md
</code></pre><p>你可以看到以下内容：</p>
<pre><code>title: 20150716
date: 2015-07-16 20:51:03
<span class="header">tags:
---</span>
</code></pre><p>其中<code>title:</code>为你文章的真正名字，<code>date:</code>为文章建立的时间，<code>tags:</code>为标记，以<code>---</code>以下的部分则是你所编写的文章内容。事实上还有许多字段可以定义如：<code>categories:</code>文章分类，<code>layout:</code>等。<br>在所在内容编写完成后我们需要将编写的内容进行转换和上传，可以使用之前的命令<code>hexo d -g</code>命令来完成。</p>
<pre><code>$ hexo <span class="keyword">d</span> -<span class="keyword">g</span>
</code></pre><p>至此我们完成了我们的第一篇文章的编写。</p>
<p>markdown的语法可以参考<a href="http://ibruce.info/2013/11/26/markdown/" target="_blank" rel="external">这里</a></p>
]]></content>
    <summary type="html">
    <![CDATA[<p>花了差不多快一个星期的时间才在github上建立起自己的博客，所以在这里记录下来，一些基础知识就省了，写的比较简单，不过建立过程的经验和关键操作的记录都有写下来。<br>]]>
    
    </summary>
    
  </entry>
  
  <entry>
    <title><![CDATA[新开始]]></title>
    <link href="http://jonsk.github.io/blog/blog/2015/07/15/%E6%96%B0%E5%BC%80%E5%A7%8B/"/>
    <id>http://jonsk.github.io/blog/blog/2015/07/15/新开始/</id>
    <published>2015-07-15T09:28:02.000Z</published>
    <updated>2015-07-16T02:15:12.000Z</updated>
    <content type="html"><![CDATA[<p>第一篇博客记录，先留个抓印。</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>第一篇博客记录，先留个抓印。</p>
]]>
    </summary>
    
  </entry>
  
</feed>