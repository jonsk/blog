<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  
  <title><![CDATA[动力火锅的猫空间]]></title>
  
  <link href="/blog/atom.xml" rel="self"/>
  <link href="http://jonsk.github.io/blog/blog//"/>
  <updated>2015-07-16T12:26:34.000Z</updated>
  <id>http://jonsk.github.io/blog/blog//</id>
  
  <author>
    <name><![CDATA[动力火锅]]></name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title><![CDATA[用Hexo在Github上建立博客]]></title>
    <link href="http://jonsk.github.io/blog/blog/2015/07/16/20150716/"/>
    <id>http://jonsk.github.io/blog/blog/2015/07/16/20150716/</id>
    <published>2015-07-16T02:42:48.000Z</published>
    <updated>2015-07-16T12:26:34.000Z</updated>
    <content type="html"><![CDATA[<p>写的比较简单，主要是一些建立过程的经验和操作的记录。<br><a id="more"></a></p>
<h3 id="0x00_关于Hexo和Github">0x00 关于Hexo和Github</h3><p>Hexo是一个基于node.js建立的博客框架，它提供一整套的解决方案，如博客主题，内容生成，提交等等功能，具体功能可以看它的<a href="https://hexo.io/" target="_blank" rel="external">官网</a>。</p>
<p>Github，这个就不用介绍了吧，你能看到这篇文章估计也是知道Github是什么：）。</p>
<h3 id="0x01_在Github上建立自己的页面">0x01 在Github上建立自己的页面</h3><p>首先你需要自己在github上注册，并上生成你自己的证书。随后就可以在github上建立自己的项目</p>
<h3 id="0x02_建立本地主机环境">0x02 建立本地主机环境</h3><p>我使用的是Linux环境，因此本教程也是介绍的在Linux系统下建立环境，以下所介绍的所有命令除非特别说明否则均使用普通用户身份输入。</p>
<p>首先安装node.js,即使你使用的是提供yum或是apt程序的Linux发行版也<strong>推荐</strong>使用下面的命令来进行安装：</p>
<pre><code>wget -qO- http<span class="variable">s:</span>//raw.github.<span class="keyword">com</span>/creationix/nvm/master/install.<span class="keyword">sh</span> | <span class="keyword">sh</span>
</code></pre><p>运行结果如下：</p>
<pre><code><span class="status">=&gt;</span> nvm is already installed in /home/jonsk/.nvm, trying to update using git
<span class="status">=&gt;</span>
<span class="status">=&gt;</span> <span class="constant">Appending</span> source string to /root/.bashrc
<span class="status">=&gt;</span> <span class="constant">You</span> currently have modules installed globally with <span class="string">`npm`</span>. <span class="constant">These</span> will no
<span class="status">=&gt;</span> longer be linked to the active version of <span class="constant">Node</span> when you install a new node
<span class="status">=&gt;</span> with <span class="string">`nvm`</span>; and they may (depending on how you construct your <span class="string">`$PATH`</span>)
<span class="status">=&gt;</span> override the binaries of modules installed with <span class="string">`nvm`</span><span class="symbol">:</span>

/home/jonsk/.nvm/v<span class="number">0</span>.<span class="number">10.40</span>/lib
├── git<span class="variable">@0</span>.<span class="number">1.5</span>
├── hexo-cli<span class="variable">@0</span>.<span class="number">1.7</span>
<span class="status">
=&gt;</span> <span class="constant">If</span> you wish to uninstall them at a later point (or re-install them under your
<span class="status">=&gt;</span> <span class="string">`nvm`</span> <span class="constant">Nodes</span>), you can remove them from the system <span class="constant">Node</span> as <span class="symbol">follows:</span>

<span class="variable">$ </span>nvm use system
<span class="variable">$ </span>npm uninstall -g a_module
<span class="status">
=&gt;</span> <span class="constant">Close</span> and reopen your terminal to start using nvm
</code></pre><p>安装完成nvmrgk后就可以使用<code>nvm install</code>来安装node.js的最新版本,或是使用下来的命令来安装node.js 0.10.40版本。</p>
<pre><code><span class="tag">nvm</span> <span class="tag">install</span> 0<span class="class">.10</span><span class="class">.40</span>
</code></pre><p>在安装完成后你将可以使用npm命令，如果系统提示没有找到npm命令则需要检查是否设置了正确的npm路径，通常安装完成后会提示使用<code>source ~/.bashrc</code>命令来更新环境变量，如果更新环境变量后还是无法找到npm则将下面的代码替换路径后加入到.bashrc文件,再次更新环境。</p>
<pre><code><span class="built_in">export</span> NVM_DIR=<span class="string">"/home/jonsk/.nvm"</span>
[ <span class="operator">-s</span> <span class="string">"<span class="variable">$NVM_DIR</span>/nvm.sh"</span> ] &amp;&amp; . <span class="string">"<span class="variable">$NVM_DIR</span>/nvm.sh"</span>  <span class="comment"># This loads nvm</span>
</code></pre><h3 id="0x03_建立本地hexo环境">0x03 建立本地hexo环境</h3><p>当npm可以使用时我们就完成了本地环境的安装,接下来我们就可以通过npm来安装hexo和相关的模块了。</p>
<pre><code>$ npm <span class="keyword">install</span> -g hexo
</code></pre><p>使用以上命令来安装hexo，其中<code>-g</code>参数为全局安装，如果一切顺利，你将会安装好hexo，接下来将通过hexo来完成基本的配置。在你的系统中找一个合适的位置建立目录，我在这里使用的是~/hexo目录，在这个目录执行以下命令进行初始化。</p>
<pre><code><span class="title">hexo</span> init 
</code></pre><p>接下来将初始化的文件转换为静态文件，这些文件也是最终要上传到我们github上的。</p>
<pre><code><span class="title">hexo</span> g
</code></pre><p>如果需要预览效果可以使用<code>hexo s</code>命令来启动一个hexo自带的web服务器，用户可以通过访问<code>http://127.0.0.1:4000</code>这个地址来预览一下效果。</p>
<pre><code><span class="title">hexo</span> s
</code></pre><p>注：事实上可以在完成初始化后就直接使用<code>hexo s</code>命令来进行预览，<code>hexo g</code>只是在上传到github之前才需要做的工作。</p>
<h3 id="0x04_配置hexo上传参数">0x04 配置hexo上传参数</h3><p>之所以将配置上传参数列是因为网上有各种配置方法很容易理解错误，因此对它进行说明。hexo的所有配置工作都是在<code>_config.yml</code>文件中完成的，而在这个配置文件中我们最关心的就是结尾的<code>deploy:</code>部分，事实上整个配置很简单，只需要更改以下三下参数<code>type</code>为git，<code>repository</code>为你项目的git地址，<code>branch</code>分支类型为gh-pages即可。</p>
<pre><code><span class="attribute">deploy</span>:
  <span class="attribute">type</span>: git
  <span class="attribute">repository</span>: <span class="attribute">https</span>:<span class="comment">//github.com/jonsk/blog.git</span>
  <span class="attribute">branch</span>: gh-pages
</code></pre><p><code>_config.yml</code>文件中的其它参数就都很简单了，网络上都已经解释的很详细了。</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>写的比较简单，主要是一些建立过程的经验和操作的记录。<br>]]>
    
    </summary>
    
  </entry>
  
  <entry>
    <title><![CDATA[新开始]]></title>
    <link href="http://jonsk.github.io/blog/blog/2015/07/15/%E6%96%B0%E5%BC%80%E5%A7%8B/"/>
    <id>http://jonsk.github.io/blog/blog/2015/07/15/新开始/</id>
    <published>2015-07-15T09:28:02.000Z</published>
    <updated>2015-07-16T02:15:12.000Z</updated>
    <content type="html"><![CDATA[<p>第一篇博客记录，先留个抓印。</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>第一篇博客记录，先留个抓印。</p>
]]>
    </summary>
    
  </entry>
  
</feed>